// Generated by psc version 0.5.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $plus$plus = function (__dict_Semigroup_1) {
        return $less$greater(__dict_Semigroup_1);
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var semigroupString = function () {
        return new Semigroup(concatString);
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_4) {
        return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
    };
    var liftA1 = function (__dict_Applicative_6) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
            };
        };
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = function () {
        return new Eq(refIneq, refEq);
    };
    var ap = function (__dict_Monad_14) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_14)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Semigroup: Semigroup, 
        Eq: Eq, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        "$": $dollar, 
        flip: flip, 
        eqString: eqString, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var applicativeEff = function () {
        return new Prelude.Applicative(applyEff, returnE);
    };
    var applyEff = function () {
        return new Prelude.Apply(Prelude.ap(monadEff()), functorEff);
    };
    var monadEff = function () {
        return new Prelude.Monad(applicativeEff, bindEff);
    };
    var bindEff = function () {
        return new Prelude.Bind(bindE, applyEff);
    };
    var functorEff = function () {
        return new Prelude.Functor(Prelude.liftA1(applicativeEff()));
    };
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var functorEither = function () {
        return new Prelude.Functor(function (_54) {
            return function (_55) {
                if (_55 instanceof Left) {
                    return new Left(_55.value0);
                };
                if (_55 instanceof Right) {
                    return new Right(_54(_55.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyEither = function () {
        return new Prelude.Apply(function (_56) {
            return function (_57) {
                if (_56 instanceof Left) {
                    return new Left(_56.value0);
                };
                if (_56 instanceof Right) {
                    return Prelude["<$>"](functorEither())(_56.value0)(_57);
                };
                throw new Error("Failed pattern match");
            };
        }, functorEither);
    };
    var applicativeEither = function () {
        return new Prelude.Applicative(applyEither, Right.create);
    };
    return {
        Left: Left, 
        Right: Right, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    
  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;
    var unsafeReadPrim = function (_106) {
        return function (_107) {
            if (tagOf(_107) === _106) {
                return Prelude.pure(Data_Either.applicativeEither())(unsafeFromForeign(_107));
            };
            return new Data_Either.Left(new TypeMismatch(_106, tagOf(_107)));
        };
    };
    var readString = unsafeReadPrim("String");
    return {
        TypeMismatch: TypeMismatch, 
        ErrorAtIndex: ErrorAtIndex, 
        ErrorAtProperty: ErrorAtProperty, 
        JSONError: JSONError, 
        readString: readString, 
        tagOf: tagOf, 
        unsafeFromForeign: unsafeFromForeign
    };
})();
var PS = PS || {};
PS.Control_Monad_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function ready(func) {
    return function () {
      jQuery(document).ready(func);
    };
  }
  ;
    
  function create(html) {
    return function () {
      return jQuery(html);
    };
  }
  ;
    
  function css(props) {
    return function(ob) {
      return function () {
        return ob.css(props);
      };
    };
  }
  ;
    
  function append(ob1) {
    return function(ob) {
      return function () {
        return ob.append(ob1);
      };
    };
  }
  ;
    
  function appendText(s) {
    return function(ob) {
      return function () {
        return ob.append(s);
      };
    };
  }
  ;
    
  function body() {
    return jQuery(document.body);
  }
  ;
    
  function setText(text) {
    return function(ob) {
      return function() {
        return ob.text(text);
      };
    };
  }
  ;
    
  function getValue(ob) {
    return function() {
      return ob.val();
    };
  }
  ;
    
  function on(evt) {
    return function(act) {
      return function(ob) {
        return function() {
          return ob.on(evt, function(e) {
            act(e)(jQuery(this))();
          });
        };
      };
    };
  }
  ;
    return {
        on: on, 
        getValue: getValue, 
        setText: setText, 
        body: body, 
        appendText: appendText, 
        append: append, 
        css: css, 
        create: create, 
        ready: ready
    };
})();
var PS = PS || {};
PS.Data_Foreign_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    function IsForeign(read) {
        this.read = read;
    };
    var stringIsForeign = function () {
        return new IsForeign(Data_Foreign.readString);
    };
    var read = function (dict) {
        return dict.read;
    };
    return {
        IsForeign: IsForeign, 
        read: read, 
        stringIsForeign: stringIsForeign
    };
})();
var PS = PS || {};
PS.Phb = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Foreign_Class = PS.Data_Foreign_Class;
    var Data_Either = PS.Data_Either;
    var Debug_Trace = PS.Debug_Trace;
    var main = Control_Monad_JQuery.ready(function __do() {
        var _14 = Control_Monad_JQuery.body();
        var _13 = Control_Monad_JQuery.create("<div>")();
        var _12 = Control_Monad_JQuery.create("<input>")();
        Control_Monad_JQuery.appendText("Your Name: ")(_13)();
        Control_Monad_JQuery.append(_12)(_13)();
        Control_Monad_JQuery.append(_13)(_14)();
        var _11 = Control_Monad_JQuery.create("<p>")();
        Control_Monad_JQuery.css({
            color: "red"
        })(_11)();
        Control_Monad_JQuery.append(_11)(_14)();
        return Prelude.flip(Control_Monad_JQuery.on("change"))(_12)(function (_) {
            return function (__1) {
                return Prelude[">>="](Control_Monad_Eff.bindEff())(Prelude["<$>"](Control_Monad_Eff.functorEff())(Data_Foreign_Class.read(Data_Foreign_Class.stringIsForeign()))(Control_Monad_JQuery.getValue(_12)))(function (_10) {
                    if (_10 instanceof Data_Either.Right) {
                        return function __do() {
                            Debug_Trace.trace("Name changed to " + _10.value0)();
                            return Control_Monad_JQuery.setText("Hello, " + _10.value0)(_11)();
                        };
                    };
                    throw new Error("Failed pattern match");
                });
            };
        })();
    });
    return {
        main: main
    };
})();
